---
import Button from './Button.astro';
import BurgerButton from './BurgerButton.astro';
import MobileMenu from './MobileMenu.astro';
import Logo from './Logo.astro';
import DesktopNav from './DesktopNav.astro';

interface Props {
  buttonId?: string;
  menuId?: string;
}

const { buttonId = 'headerBurger', menuId = 'mobileMenu' } = Astro.props;
---

<header class="header">
  <div class="header-container">
    <Logo showText={true} />

    <DesktopNav />

    <div class="header-actions">
      <Button href="/contact/" variant="filled" size="small" class="cta-button">
        Записаться на урок
      </Button>
      <BurgerButton {buttonId} {menuId} />
    </div>
  </div>

  <MobileMenu {menuId}>
    <Button href="/contact/" variant="filled" size="small" class="mobile-cta">
      Записаться на урок
    </Button>
  </MobileMenu>
</header>

<script>
  function assertElement<T extends Element>(
    element: Element | null,
    constructor: { new (): T },
    message?: string
  ): T {
    if (!element) {
      throw new Error(message ?? `Element not found`);
    }
    if (!(element instanceof constructor)) {
      throw new Error(message ?? `Expected ${constructor.name}`);
    }
    return element;
  }

  document.addEventListener('DOMContentLoaded', () => {
    try {
      // Получаем элементы с гарантированными типами
      const button = assertElement(
        document.getElementById('headerBurger'),
        HTMLButtonElement,
        'Menu button not found'
      );

      const menu = assertElement(
        document.getElementById('mobileMenu'),
        HTMLElement,
        'Menu container not found'
      );

      // Дальше используем button и menu как обычно
      let isOpen = false;

      function toggleMenu() {
        isOpen = !isOpen;
        button.setAttribute('aria-expanded', isOpen.toString());
        button.setAttribute('aria-label', isOpen ? 'Закрыть меню' : 'Открыть меню');
        menu.setAttribute('aria-hidden', (!isOpen).toString());
        button.classList.toggle('active', isOpen);
        menu.classList.toggle('active', isOpen);

        if (isOpen) {
          document.body.classList.add('menu-open');
        } else {
          document.body.classList.remove('menu-open');
        }
      }

      function closeMenu() {
        if (isOpen) {
          isOpen = false;
          button.setAttribute('aria-expanded', 'false');
          button.setAttribute('aria-label', 'Открыть меню');
          menu.setAttribute('aria-hidden', 'true');
          button.classList.remove('active');
          menu.classList.remove('active');
          document.body.classList.remove('menu-open');
        }
      }

      button.addEventListener('click', toggleMenu);
      menu.querySelectorAll('.nav-item').forEach((link) => {
        link.addEventListener('click', closeMenu);
      });

      window.addEventListener('resize', () => {
        if (window.innerWidth > 768) closeMenu();
      });

      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && isOpen) closeMenu();
      });
    } catch (error) {
      console.error('Header menu initialization failed:', error);
    }
  });
</script>

<style>
  .header {
    background: var(--background-white);
    border-bottom: 1px solid var(--border-light);
    position: sticky;
    top: 0;
    z-index: 1000;
    backdrop-filter: blur(10px);
    width: 100%;
  }

  .header-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 1rem 2rem;
    gap: 2rem;
  }

  .header-actions {
    display: flex;
    align-items: center;
    gap: 1rem;
    flex-shrink: 0;
  }

  .cta-button,
  .mobile-cta {
    white-space: nowrap;
  }

  .mobile-cta {
    margin-top: 1rem;
    width: 100%;
    justify-content: center;
  }

  @media (max-width: 1024px) {
    .header-container {
      padding: 1rem;
    }
  }

  @media (max-width: 768px) {
    .header-container {
      gap: 1rem;
      padding: 1rem;
    }
  }

  @media (max-width: 480px) {
    .cta-button {
      display: none;
    }
    .header-container {
      padding: 0.75rem;
    }
  }
</style>
